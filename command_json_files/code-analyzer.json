{
  "commands": [
    {
      "name": "code-analyzer config",
      "description": "Output the current state of configuration for Code Analyzer.",
      "optionalFlags": [
        {
          "name": "--workspace",
          "description": "Set of files that make up your workspace. Use the `--workspace` flag to display only the configuration associated with the rules that apply to the files that make up your workspace. Typically, a workspace is a single project folder that contains all your files. But it can also consist of one or more folders, one or more files, and use glob patterns (wildcards). If you specify this flag multiple times, then your workspace is the sum of the files and folders. This command uses the types of files in the workspace, such as JavaScript or Typescript, to determine the applicable configuration state. For example, if your workspace contains only JavaScript files, then the command doesn't display configuration state associated with TypeScript rules. The command uses a file's extension to determine what kind of file it is, such as \".ts\" for TypeScript. Some engines can be configured to add additional rules based on what it finds in your workspace. For example, if you set the engines.eslint.auto_discover_eslint_config value of your `code-analyzer.yml` file to true, then supplying your workspace allows the \"eslint\" engine to examine your files in order to find ESLint configuration files that could potentially add in additional rules. If you specify `--target` but not `--workspace`, then the current folder '.' is used as your workspace."
        },
        {
          "name": "--target",
          "description": "Subset of files within your workspace that you want to target for analysis. Use the `--target` flag to display the configuration state associated with the rules that apply to only a subset of targeted files within your workspace. You can specify a target as a file, a folder, or a glob pattern. If you specify this flag multiple times, then the full list of targeted files is the sum of the files and folders. The command uses the type of the targeted files, such as JavaScript or Typescript, to determine which configuration state is applicable. For example, if you target only JavaScript files, then the command doesn't display the configuration state associated with TypeScript rules. The command uses a file's extension to determine what kind of file it is, such as \".ts\" for TypeScript. Each targeted file must live within the workspace specified by the `–-workspace` flag. If you specify `--workspace` but not `--target`, then all the files within your workspace are targeted."
        },
        {
          "name": "--rule-selector",
          "description": "Selection of rules, based on engine name, severity level, rule name, tag, or a combination of criteria separated by colons. Use the `--rule-selector` flag to display only the configuration associated with the rules based on specific criteria. You can select by engine, such as the rules associated with the \"retire-js\" or \"eslint\" engine. Or select by the severity of the rules, such as high or moderate. You can also select rules using tag values or rule names. You can combine different criteria using colons to further filter the list; the colon works as an intersection. For example, `--rule-selector eslint:Security` reduces the output to only contain the configuration state associated with the rules from the \"eslint\" engine that have the \"Security\" tag. To add multiple rule selectors together (a union), specify the `--rule-selector` flag multiple times, such as `--rule-selector eslint:Recommended --rule-selector retire-js:3`. If you don't specify this flag, then the command uses the \"all\" rule selector. Run `sf code-analyzer config --rule-selector Recommended` to display the configuration state associated with just the 'Recommended' rules, instead of all the rules.",
          "defaultValue": "all"
        },
        {
          "name": "--config-file",
          "description": "Path to the existing configuration file used to customize the engines and rules. Use this flag to apply the customizations from a custom Code Analyzer configuration file to be displayed alongside the current Code Analyzer configuration state. If you don't specify this flag, then the command looks for and applies a file named `code-analyzer.yml` or `code-analyzer.yaml` in your current folder."
        },
        {
          "name": "--output-file",
          "description": "Output file to write the configuration state to. The file is written in YAML format. If you specify a file within folder, such as `--output-file ./config/code-analyzer.yml`, the folder must already exist, or you get an error. If the file already exists, a prompt asks if you want to overwrite it. If you don't specify this flag, the command outputs the configuration state to the terminal."
        },
        {
          "name": "--include-unmodified-rules",
          "description": "Include unmodified rules in the rule override settings. The default behavior of the config command is to not include the unmodified rules with their default values in the rule override settings (for the rules selected via the `–-rule-selector` flag). This default behavior prevents your configuration file from being unnecessarily large. If you want to include the unmodified rules, in addition to the modified rules, then specify this flag.",
          "type": "boolean"
        }
      ]
    },
    {
      "name": "code-analyzer rules",
      "description": "List the rules that are available to analyze your code.",
      "optionalFlags": [
        {
          "name": "--workspace",
          "description": "Set of files that make up your workspace. Use the `--workspace` flag to return a more accurate list of the rules that apply to the files that make up your workspace. Typically, a workspace is a single project folder that contains all your files. But it can also consist of one or more folders, one or more files, and use glob patterns (wildcards). If you specify this flag multiple times, then your workspace is the sum of the files and folders. The command uses the types of files in the workspace, such as JavaScript or Typescript, to determine which rules to list. For example, if your workspace contains only JavaScript files, the command doesn't list TypeScript rules. The command uses a file's extension to determine what kind of file it is, such as \".ts\" for TypeScript. Some engines may be configured to add additional rules based on what it finds in your workspace. For example, if you set the engines.eslint.auto_discover_eslint_config value of your `code-analyzer.yml` file to true, then supplying your workspace allows the \"eslint\" engine to examine your files in order to find ESLint configuration files that could potentially add in additional rules. If you specify `--target` but not `--workspace`, then the current folder '.' is used as your workspace."
        },
        {
          "name": "--target",
          "description": "Subset of files within your workspace that you want to target for analysis. Use the `--target` flag to return a more accurate list of the rules that apply to only a subset of targeted files within your workspace. You can specify a target as a file, a folder, or a glob pattern. If you specify this flag multiple times, then the full list of targeted files is the sum of the files and folders. The command uses the type of the targeted files, such as JavaScript or Typescript, to determine which rules to list. For example, if you target only JavaScript files, the command doesn't list TypeScript rules. The command uses a file's extension to determine what kind of file it is, such as \".ts\" for TypeScript. Each targeted file must live within the workspace specified by the –-workspace flag. If you specify `--workspace` but not `--target`, then all the files within your workspace are targeted."
        },
        {
          "name": "--rule-selector",
          "description": "Selection of rules, based on engine name, severity level, rule name, tag, or a combination of criteria separated by colons. Use the `--rule-selector` flag to select the list of rules based on specific criteria. For example, you can select by engine, such as the rules associated with the \"retire-js\" or \"eslint\" engine. Or select by the severity of the rules, such as high or moderate. You can also select rules using tag values or rule names. Every rule has a name, which is unique within the scope of an engine. Most rules have tags, although it's not required. An example of a tag is \"Recommended\". You can combine different criteria using colons to further filter the list; the colon works as an intersection. For example, `--rule-selector eslint:Security` lists rules associated only with the \"eslint\" engine that have the Security tag. The flag `--rule-selector eslint:Security:3` flag lists the \"eslint\" rules that have the Security tag and moderate severity (3). To add multiple rule selectors together (a union), specify the `--rule-selector` flag multiple times, such as `--rule-selector eslint:Recommended --rule-selector retire-js:3`. Run `sf code-analyzer rules --rule-selector all` to list the possible values for engine name, rule name, tags, and severity levels that you can use with this flag.",
          "defaultValue": "Recommended"
        },
        {
          "name": "--config-file",
          "description": "Path to the configuration file used to customize the engines and rules. Code Analyzer has an internal default configuration for its rule and engine properties. If you want to override these defaults, you can create a Code Analyzer configuration file. We recommend that you name your Code Analyzer configuration file `code-analyzer.yml` or `code-analyzer.yaml` and put it at the root of your workspace. You then don't need to use this flag when you run the `code-analyzer rules` command from the root of your workspace, because it automatically looks for either file in the current folder, and if found, applies its rule overrides and engine settings. If you want to name the file something else, or put it in an alternative folder, then you must specify this flag. To help you get started, use the `code-analyzer config` command to create your first Code Analyzer configuration file. With it, you can change the severity of an existing rule, change a rule's tags, and so on. Then use this flag to specify the file so that the command takes your customizations into account."
        },
        {
          "name": "--output-file",
          "description": "Name of the file where the selected rules are written. The file format depends on the extension you specify; currently, only .json is supported for JSON-formatted output. If you specify a file within folder, such as `--output-file ./out/rules.json`, the folder must already exist, or you get an error. If the file already exists, it's overwritten without prompting. If you don't specify this flag, the command outputs the rules to only the terminal."
        },
        {
          "name": "--view",
          "description": "Format to display the rules in the terminal. The format `table` is concise and shows minimal output, the format `detail` shows all available information. If you specify neither `--view` nor `--output-file`, then the default table view is shown. If you specify `--output-file` but not `--view`, only summary information is shown in the terminal.",
          "permissibleValues": [
            "detail",
            "table"
          ]
        }
      ]
    },
    {
      "name": "code-analyzer run",
      "description": "Analyze your code with a selection of rules to ensure good coding practices.",
      "optionalFlags": [
        {
          "name": "--workspace",
          "description": "Set of files that make up your workspace. Typically, a workspace is a single project folder that contains all your files. But it can also consist of one or more folders, one or more files, and use glob patterns (wildcards). If you specify this flag multiple times, then your workspace is the sum of the files and folders. Some engines often need your entire code base to perform an analysis, even if you want to target only a subset of the files within your workspace , such as with the `--target` flag. For example, the Salesforce Graph Engine might need to compile your entire project in order to properly build a graph so it can perform a data flow analysis on the paths that start in your targeted files. If you don't specify the `--workspace` flag, then the current folder '.' is used as your workspace.",
          "defaultValue": "."
        },
        {
          "name": "--target",
          "description": "Subset of files within your workspace to be targeted for analysis. You can specify a target as a file, a folder, or a glob pattern. If you specify this flag multiple times, then the full list of targeted files is the sum of the files and folders. Each targeted file must live within the workspace that you specified with the `–-workspace` flag. If you don't specify the `--target` flag, then all the files within your workspace (specified by the `--workspace` flag) are targeted for analysis."
        },
        {
          "name": "--rule-selector",
          "description": "Selection of rules, based on engine name, severity level, rule name, tag, or a combination of criteria separated by colons. Use the `--rule-selector` flag to select the list of rules to run based on specific criteria. For example, you can select by engine, such as the rules associated with the \"retire-js\" or \"eslint\" engine. Or select by the severity of the rules, such as high or moderate. You can also select rules using tag values or rule names. Every rule has a name, which is unique within the scope of an engine. Most rules have tags, although it's not required. An example of a tag is \"Recommended\". You can combine different criteria using colons to further filter the list; the colon works as an intersection. For example, `--rule-selector eslint:Security` runs rules associated only with the \"eslint\" engine that have the Security tag. The flag `--rule-selector eslint:Security:3` flag runs the \"eslint\" rules that have the Security tag and moderate severity (3). To add multiple rule selectors together (a union), specify the `--rule-selector` flag multiple times, such as `--rule-selector eslint:Recommended --rule-selector retire-js:3`. Run `sf code-analyzer rules --rule-selector all` to see the possible values for engine name, rule name, tags, and severity levels that you can use with this flag.",
          "defaultValue": "Recommended"
        },
        {
          "name": "--severity-threshold",
          "description": "Severity level of a found violation that must be met or exceeded to cause this command to fail with a non-zero exit code. You can specify either a number (2) or its equivalent string (\"High\")."
        },
        {
          "name": "--view",
          "description": "Format to display the command results in the terminal. The format `table` is concise and shows minimal output, the format `detail` shows all available information. If you specify neither `--view` nor `--output-file`, then the default table view is shown. If you specify `--output-file` but not `--view`, only summary information is shown in the terminal.",
          "permissibleValues": [
            "detail",
            "table"
          ]
        },
        {
          "name": "--output-file",
          "description": "Name of the file where the analysis results are written. The file format depends on the extension you specify, such as .csv, .html, .xml, and so on. If you don't specify this flag, the command outputs the results to only the terminal. Use this flag to print the results to a file; the format of the results depends on the extension you provide. For example, `--output-file results.csv` creates a comma-separated values file. You can specify one of these extensions: - .csv - .html or .htm - .json - .sarif or .sarif.json - .xml To output the results to multiple files, specify this flag multiple times. For example: `--output-file results.json --output-file report.html` creates both a JSON results file and an HTML file. If you specify a file within a folder, such as `--output-file ./out/results.json`, the folder must already exist, or you get an error. If the file already exists, it's overwritten without prompting.",
          "permissibleValues": [
            ".csv",
            ".html",
            ".htm",
            ".json",
            ".sarif",
            ".sarif.json",
            ".xml"
          ]
        },
        {
          "name": "--config-file",
          "description": "Path to the configuration file used to customize the engines and rules. Code Analyzer has an internal default configuration for its rule and engine properties. If you want to override these defaults, you can create a Code Analyzer configuration file. We recommend that you name your Code Analyzer configuration file `code-analyzer.yml` or `code-analyzer.yaml` and put it at the root of your workspace. You then don't need to use this flag when you run the `code-analyzer run` command from the root of your workspace, because it automatically looks for either file in the current folder, and if found, applies its rule overrides and engine settings. If you want to name the file something else, or put it in an alternative folder, then you must specify this flag. To help you get started, use the `code-analyzer config` command to create your first Code Analyzer configuration file. With it, you can change the severity of an existing rule, change a rule's tags, and so on. Then use this flag to specify the file so that the command takes your customizations into account."
        }
      ]
    }
  ]
}